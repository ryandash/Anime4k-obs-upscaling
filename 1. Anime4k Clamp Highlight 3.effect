// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
>;

// Provided by Stream Effects
uniform float4 Time<
	bool automatic = true;
>;
uniform float4 ViewSize<
	bool automatic = true;
>;
uniform texture2d InputA<
	bool automatic = true;
>;

uniform texture2d _PreviousPass<
	string name = "Previous Pass";
	string field_type = "input";
>;

// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Wrap;
	AddressV  = Wrap;
	Filter    = Linear;
};

struct VertFragData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertFragData VSDefault(VertFragData vtx) {
	vtx.pos = mul(float4(vtx.pos.xyz, 1.0), ViewProj);
	return vtx;
}

#define parens(x) ((x)) 
#define KERNELSIZE parens(5) //Kernel size, must be an positive odd integer.
#define KERNELHALFSIZE parens(2) //Half of the kernel size without remainder. Must be equal to trunc(KERNELSIZE/2).

float4 PSDefault(VertFragData vtx, texture2d _PreviousPass) : TARGET {
	float4 original = InputA.Sample(def_sampler, vtx.uv);
	float current_luma = dot(float4(0.299, 0.587, 0.114, 0.0), original);
	float new_luma = min(current_luma, _PreviousPass.Sample(def_sampler, vtx.uv).x);
	
	//This trick is only possible if the inverse Y->RGB matrix has 1 for every row... (which is the case for BT.709)
	//Otherwise we would need to convert RGB to YUV, modify Y then convert back to RGB.
    return original - (current_luma - new_luma);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vtx);
		pixel_shader  = PSDefault(vtx, _PreviousPass); 
	}
}

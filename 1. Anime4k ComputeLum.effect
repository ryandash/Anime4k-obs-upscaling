uniform float4x4 ViewProj;
uniform texture2d image;

uniform float2 uv_scale;
uniform float2 uv_offset;

// ---------- Shader Code
sampler_state def_sampler {
	Filter    = Linear;
	AddressU  = Wrap;
	AddressV  = Wrap;
	BorderColor = 00000000;
};

struct VertFragData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertFragData VSDefault(VertFragData vtx) {
	vtx.pos = mul(float4(vtx.pos.xyz, 1.0), ViewProj);
	vtx.uv = vtx.uv * uv_scale + uv_offset;
	return vtx;
}

float4 PSDefault(VertFragData vtx) : TARGET {
	//Anime4k_ComputeLum ****************************************************************
	float4 c0 = image.Sample(def_sampler, vtx.uv);

	float lum = (c0[0] + c0[0] + c0[1] + c0[1] + c0[1] + c0[2]) / 6;
	
	return float4(c0[0], c0[1], c0[2], lum);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vtx);
		pixel_shader  = PSDefault(vtx); 
	}
}

// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
>;

// Provided by Stream Effects
uniform float4 Time<
	bool automatic = true;
>;
uniform float4 ViewSize<
	bool automatic = true;
>;
uniform texture2d InputA<
	bool automatic = true;
>;

uniform float _pVerticalEdge<
	string name = "Vertical Edge %";
	string field_type = "slider";
	float scale = 0.01;
	float minimum = 0.0;
	float maximum = 100.0;
> = 50.0;

uniform float _pSize<
	string name = "Step Size (px)";
	string field_type = "slider";
	float scale = 1.0;
	float minimum = 0.5;
	float maximum = 128.0;
	float step = 0.5;
> = 16.0;

uniform float _pBarSize<
	string name = "Bar Size (px)";
	string field_type = "slider";
	float scale = 1.0;
	float minimum = 0.5;
	float maximum = 128.0;
	float step = 0.5;
> = 1.0;

// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Wrap;
	AddressV  = Wrap;
	Filter    = Linear;
};

struct VertFragData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertFragData VSDefault(VertFragData vtx) {
	vtx.pos = mul(float4(vtx.pos.xyz, 1.0), ViewProj);
	return vtx;
}

float4 PSDefault(VertFragData vtx) : TARGET {
	//Anime4k_ComputeLum ****************************************************************
	float4 c0 = InputA.Sample(def_sampler, vtx.uv);

	float lum = (c0[0] + c0[0] + c0[1] + c0[1] + c0[1] + c0[2]) / 6;
	
	return float4(c0[0], c0[1], c0[2], lum);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vtx);
		pixel_shader  = PSDefault(vtx); 
	}
}

// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
>;

// Provided by Stream Effects
uniform float4 Time<
	bool automatic = true;
>;
uniform float4 ViewSize<
	bool automatic = true;
>;
uniform texture2d InputA<
	bool automatic = true;
>;

// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Wrap;
	AddressV  = Wrap;
	Filter    = Linear;
};

struct VertFragData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertFragData VSDefault(VertFragData vtx) {
	vtx.pos = mul(float4(vtx.pos.xyz, 1.0), ViewProj);
	return vtx;
}

#define parens(x) ((x)) 
#define KERNELSIZE parens(5) //Kernel size, must be an positive odd integer.
#define KERNELHALFSIZE parens(2) //Half of the kernel size without remainder. Must be equal to trunc(KERNELSIZE/2).

float4 PSDefault(VertFragData vtx) : TARGET {
	float4 original = InputA.Sample(def_sampler, vtx.uv);
	float gmax = 0.0;

	for (int i=0; i<KERNELSIZE; i++) {
		float g = dot(float4(0.299, 0.587, 0.114, 0.0), InputA.Sample(def_sampler, vtx.uv + float2(i - KERNELHALFSIZE, 0)));
		gmax = max(g, gmax);
	}
	
	return float4(gmax, 0.0, 0.0, original.a);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vtx);
		pixel_shader  = PSDefault(vtx); 
	}
}

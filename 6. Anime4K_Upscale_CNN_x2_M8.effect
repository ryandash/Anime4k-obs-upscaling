// Always provided by OBS 
uniform float4x4 ViewProj< 
	bool automatic = true; 
>; 
 
// Provided by Stream Effects 
uniform float4 Time< 
	bool automatic = true; 
>; 
uniform float4 ViewSize< 
	bool automatic = true; 
>; 
 
uniform texture2d _PreviousPass1< 
    string name = "Previous Pass1"; 
    string field_type = "input"; 
>; 
 
uniform texture2d _PreviousPass2< 
    string name = "Previous Pass2"; 
    string field_type = "input"; 
>; 
 
uniform texture2d _PreviousPass3< 
    string name = "Previous Pass3"; 
    string field_type = "input"; 
>; 
 
uniform texture2d _PreviousPass4< 
    string name = "Previous Pass4"; 
    string field_type = "input"; 
>; 
 
uniform texture2d _PreviousPass5< 
    string name = "Previous Pass5"; 
    string field_type = "input"; 
>; 
 
uniform texture2d _PreviousPass6< 
    string name = "Previous Pass6"; 
    string field_type = "input"; 
>; 
 
uniform texture2d _PreviousPass7< 
    string name = "Previous Pass7"; 
    string field_type = "input"; 
>; 
 
// ---------- Shader Code 
sampler_state def_sampler { 
	AddressU  = Wrap; 
	AddressV  = Wrap; 
	Filter    = Linear; 
}; 
 
struct VertFragData { 
	float4 pos : POSITION; 
	float2 uv  : TEXCOORD0; 
}; 
 
VertFragData VSDefault(VertFragData vtx) { 
	vtx.pos = mul(float4(vtx.pos.xyz, 1.0), ViewProj); 
	return vtx; 
} 
 
float4 mat4(float a, float b, float c, float d, float e, float f, float g, float h, float i, float j, float k, float l, float m, float n, float o, float p){ 
	float4 column1=float4(a,b,c,d); 
	float4 column2=float4(e,f,g,h); 
	float4 column3=float4(i,j,k,l); 
	float4 column4=float4(m,n,o,p); 
	return float4(column1 + column2 + column3 + column4); 
} 
 
#define parens(x) ((x)) 
 
#define g_0 parens(max((_PreviousPass1.Sample(def_sampler, pos)), 0.0)) 
#define g_1 parens(max(-(_PreviousPass2.Sample(def_sampler, pos)), 0.0)) 
#define g_2 parens(max((_PreviousPass1.Sample(def_sampler, pos)), 0.0)) 
#define g_3 parens(max(-(_PreviousPass2.Sample(def_sampler, pos)), 0.0)) 
#define g_4 parens(max((_PreviousPass3.Sample(def_sampler, pos)), 0.0)) 
#define g_5 parens(max(-(_PreviousPass4.Sample(def_sampler, pos)), 0.0)) 
#define g_6 parens(max((_PreviousPass3.Sample(def_sampler, pos)), 0.0)) 
#define g_7 parens(max(-(_PreviousPass4.Sample(def_sampler, pos)), 0.0)) 
#define g_8 parens(max((_PreviousPass5.Sample(def_sampler, pos)), 0.0)) 
#define g_9 parens(max(-(_PreviousPass6.Sample(def_sampler, pos)), 0.0)) 
#define g_10 parens(max((_PreviousPass5.Sample(def_sampler, pos)), 0.0)) 
#define g_11 parens(max(-(_PreviousPass6.Sample(def_sampler, pos)), 0.0)) 
#define g_12 parens(max((_PreviousPass7.Sample(def_sampler, pos)), 0.0)) 
#define g_13 parens(max(-(_PreviousPass8.Sample(def_sampler, pos)), 0.0)) 
 
float4 PSDefault(VertFragData vtx, texture2d _PreviousPass1, texture2d _PreviousPass2, texture2d _PreviousPass3, texture2d _PreviousPass4, texture2d _PreviousPass5, texture2d _PreviousPass6, texture2d _PreviousPass7) : TARGET { 
    float4 result = mat4(-0.0067711817, 0.08160003, 0.0247279, 0.03084815, -0.026977416, -0.02120602, -0.025078611, -0.029852165, -0.011627478, -0.012742972, 0.022736797, -0.0028815821, -0.007515677, 0.0172887, -0.023259213, 0.009608947) * g_0; 
    result += mat4(-0.028660107, -0.014015208, -0.027838672, -0.013171922, 0.0029435428, 0.027047642, -0.017478354, 0.022834882, -0.037572853, -0.0034044068, -0.0149029335, -0.013362301, 0.009827443, -0.015742151, -0.0074795415, -0.0022266617) * g_1; 
    result += mat4(-0.07579662, -0.039754186, -0.066026606, -0.046816852, 0.1099032, 0.043956704, 0.073109835, 0.04680284, -0.06896613, -0.008838632, -0.044584926, -0.01319039, -0.0021152915, -0.04503326, 0.027061926, -0.028334105) * g_2; 
    result += mat4(0.15458213, 0.059769996, 0.09327123, -0.028782733, 0.023459995, -0.15390377, -0.13432898, -0.1127775, 0.072764635, -0.0020463336, 0.034736466, -0.0012086042, -0.05847183, -0.029952323, 0.052969377, 0.09590908) * g_3; 
    result += mat4(-0.07476772, -0.016574614, 0.04131183, 0.017335678, 0.009654406, 0.072183535, -0.002266456, 0.086873695, 9.310129e-05, 0.0056416965, -0.004188391, 0.023132093, -0.05183336, -0.025825873, -0.03684392, -0.0075729224) * g_4; 
    result += mat4(0.00878842, 0.03869637, -0.035759524, 0.003345386, -0.064184256, -0.034568302, -0.06672922, -0.0686381, -0.06794392, -0.10685906, 0.04679947, -0.012535639, 0.006932529, -0.007783515, 0.109123886, 0.13804391) * g_5; 
    result += mat4(-0.03160699, 0.050473, -0.09030729, 0.0649397, 0.11466501, 0.17912874, -0.0081851315, 0.052244574, 0.051632743, 0.061941486, 0.06546816, 0.12174249, -0.05104755, -0.018193979, -0.032196652, -0.035292786) * g_6; 
    result += mat4(0.013612735, -0.0024100312, -0.068611205, -0.07369285, -0.019647537, -0.066944756, -0.010012875, -0.06785739, -0.062246565, -0.087313406, -0.044278186, -0.09368995, 0.052555013, 0.13604961, 0.05645059, 0.08763303) * g_7; 
    result += mat4(0.04218486, -0.05028401, 0.059086576, -0.03545452, 0.027737848, 0.0043074046, 0.0011001764, -0.073026665, -0.04094988, 0.044061556, -0.009812515, 0.06841999, -0.06612581, 0.037223976, -0.07759491, -0.04356598) * g_8; 
    result += mat4(-0.027558247, 0.014248466, -0.019813016, -0.058107473, -0.016717663, -0.020424338, 0.0053625097, -0.009917319, 0.013678771, 0.0113340765, 0.0061787106, -0.036083996, -0.020179711, -0.011310535, 0.054827053, -0.0008278952) * g_9; 
    result += mat4(0.028690035, -0.012079616, 0.11931408, -0.048533775, 0.069336995, 0.0049852817, 0.013774468, 0.035233382, -0.07384821, 0.0003354423, -0.0059171803, -0.04503906, 0.08727279, 0.005138857, -0.17724465, 0.055782065) * g_10; 
    result += mat4(-0.20744391, 0.24348328, -0.3145766, 0.17026486, -0.022870807, -0.01648648, -0.05912279, -0.012555373, -0.066004686, 0.03182394, 0.16285324, -0.1221846, -0.31816196, 0.007928748, 0.43180224, -0.015949022) * g_11; 
    result += mat4(0.16363169, 0.14781676, -0.2377973, -0.1571377, -0.09038187, 0.0046504294, 0.033955004, -0.051421452, 0.046735536, 0.006827522, -0.121338, 0.12671822, 0.15833299, -0.1858712, -0.1942371, 0.17336044) * g_12; 
    result += mat4(-0.018145572, -0.015550516, 0.044410378, 0.046016492, 0.084021375, 0.05327457, -0.008270992, -0.045435544, 0.07185879, -0.131923, 0.26721445, -0.26745328, -0.07093472, 0.042701527, 0.13793674, -0.095621444) * g_13; 
    result += float4(0.016836504, 0.010161949, 0.021351453, 0.01278978); 
    return result; 
} 
 
technique Draw 
{ 
    pass 
    { 
        vertex_shader = VSDefault(vtx); 
        pixel_shader = PSDefault(vtx, _PreviousPass1, _PreviousPass2, _PreviousPass3, _PreviousPass4, _PreviousPass5, _PreviousPass6, _PreviousPass7); 
    } 
} 

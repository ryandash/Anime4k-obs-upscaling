// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
>;

// Provided by Stream Effects
uniform float4 Time<
	bool automatic = true;
>;
uniform float4 ViewSize<
	bool automatic = true;
>;
uniform texture2d InputA<
	bool automatic = true;
>;

uniform float _pVerticalEdge<
	string name = "Vertical Edge %";
	string field_type = "slider";
	float scale = 0.01;
	float minimum = 0.0;
	float maximum = 100.0;
> = 50.0;

uniform float _pSize<
	string name = "Step Size (px)";
	string field_type = "slider";
	float scale = 1.0;
	float minimum = 0.5;
	float maximum = 128.0;
	float step = 0.5;
> = 16.0;

uniform float _pBarSize<
	string name = "Bar Size (px)";
	string field_type = "slider";
	float scale = 1.0;
	float minimum = 0.5;
	float maximum = 128.0;
	float step = 0.5;
> = 1.0;

uniform texture2d _PreviousPass<
	string name = "Previous Pass";
	string field_type = "input";
>;

#define parens(x) ((x)) 

#define dx parens(1/(float)ViewSize.x)
#define dy parens(1/(float)ViewSize.y)

// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Wrap;
	AddressV  = Wrap;
	Filter    = Linear;
};

struct VertFragData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertFragData VSDefault(VertFragData vtx) {
	vtx.pos = mul(float4(vtx.pos.xyz, 1.0), ViewProj);
	return vtx;
}

float4 getLargest(float4 cc, float4 lightestColor, float4 a, float4 b, float4 c) {
	float4 newColor = cc * (1 - _pStrength) + ((a + b + c) / 3) * _pStrength;
	if (newColor[3] > lightestColor[3]) {
		return newColor;
	}
	return lightestColor;
}

float4 getSample(float2 pos) {
	return float4(InputA.Sample(def_sampler, pos).rgb, _PreviousPass.Sample(def_sampler, pos).a);
}

float4 PSDefault(VertFragData vtx, texture2d _PreviousPass) : TARGET {
	float4 c0 = getSample(vtx.uv);

	//[tl  t tr]
	//[ l     r]
	//[bl  b br]

	float t = getSample(vtx.uv + float2(0, -dy))[3];
	float tl = getSample(vtx.uv + float2(-dx, -dy))[3];
	float tr = getSample(vtx.uv + float2(dx, -dy))[3];
	
	float l = getSample(vtx.uv + float2(-dx, 0))[3];
	float r = getSample(vtx.uv + float2(dx, 0))[3];
	
	float b = getSample(vtx.uv + float2(0, dy))[3];
	float bl = getSample(vtx.uv + float2(-dx, dy))[3];
	float br = getSample(vtx.uv + float2(dx, dy))[3];
	
	//Horizontal Gradient
	//[-1  0  1]
	//[-2  0  2]
	//[-1  0  1]
	float xgrad = (-tl + tr - l - l + r + r - bl + br);
	
	//Vertical Gradient
	//[-1 -2 -1]
	//[ 0  0  0]
	//[ 1  2  1]
	float ygrad = (-tl - t - t - tr + bl + b + b + br);
	
	//Computes the luminance's gradient and saves it in the unused alpha channel
	return float4(c0[0], c0[1], c0[2], 1 - clamp(sqrt(xgrad * xgrad + ygrad * ygrad), 0, 1));
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vtx);
		pixel_shader  = PSDefault(vtx, _PreviousPass); 
	}
}

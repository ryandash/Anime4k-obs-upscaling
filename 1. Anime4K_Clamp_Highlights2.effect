 
float4 PSDefault(VertFragData vtx) : TARGET { 
// Always provided by OBS 
uniform float4x4 ViewProj< 
	bool automatic = true; 
>; 
 
// Provided by Stream Effects 
uniform float4 Time< 
	bool automatic = true; 
>; 
uniform float4 ViewSize< 
	bool automatic = true; 
>; 
 
// ---------- Shader Code 
sampler_state def_sampler { 
	AddressU  = Wrap; 
	AddressV  = Wrap; 
	Filter    = Linear; 
}; 
 
struct VertFragData { 
	float4 pos : POSITION; 
	float2 uv  : TEXCOORD0; 
}; 
 
VertFragData VSDefault(VertFragData vtx) { 
	vtx.pos = mul(float4(vtx.pos.xyz, 1.0), ViewProj); 
	return vtx; 
} 
 
float4 mat4(float a, float b, float c, float d, float e, float f, float g, float h, float i, float j, float k, float l, float m, float n, float o, float p){ 
	float4 column1=float4(a,b,c,d); 
	float4 column2=float4(e,f,g,h); 
	float4 column3=float4(i,j,k,l); 
	float4 column4=float4(m,n,o,p); 
	return float4(column1 + column2 + column3 + column4); 
} 
 
#define parens(x) ((x)) 
 
 
	float gmax = 0.0; 
ECHO is off.
	for (int i=0; i<KERNELSIZE; i++) { 
		float g = get_luma(MAIN_texOff(float2(i - KERNELHALFSIZE, 0))); 
ECHO is off.
		gmax = max(g, gmax); 
	} 
ECHO is off.
	return float4(gmax, 0.0, 0.0, 0.0); 
} 
 
technique Draw 
{ 
    pass 
    { 
        vertex_shader = VSDefault(vtx); 
        pixel_shader = PSDefault(vtx); 
    } 
} 

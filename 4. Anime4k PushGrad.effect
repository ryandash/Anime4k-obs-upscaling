uniform float4x4 ViewProj;
uniform texture2d image;

uniform float2 uv_scale;
uniform float2 uv_offset;
uniform float2 uv_size;

uniform texture2d PreviousPass<
	string name = "Previous Pass";
	string field_type = "input";
>;

uniform float Strength<
	string name = "strength";
	string field_type = "slider";
	float scale = 1.0;
	float minimum = 1.0;
	float maximum = 10.0;
	float step = 1.0;
> = 1.0;

#define parens(x) ((x)) 

#define dx parens(1/(float)uv_size.x)
#define dy parens(1/(float)uv_size.y)

// ---------- Shader Code
sampler_state def_sampler {
	Filter    = Linear;
	AddressU  = Wrap;
	AddressV  = Wrap;
	BorderColor = 00000000;
};

struct VertFragData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertFragData VSDefault(VertFragData vtx) {
	vtx.pos = mul(float4(vtx.pos.xyz, 1.0), ViewProj);
	vtx.uv = vtx.uv * uv_scale + uv_offset;
	return vtx;
}

float min3(float4 a, float4 b, float4 c) {
	return min(min(a[3], b[3]), c[3]);
}

float max3(float4 a, float4 b, float4 c) {
	return max(max(a[3], b[3]), c[3]);
}

float4 getAverage(float4 cc, float4 a, float4 b, float4 c) {
	return cc * (1 - Strength) + ((a + b + c) / 3) * Strength;
}

float4 getSample(float2 pos) {
	return float4(image.Sample(def_sampler, pos).rgb, PreviousPass.Sample(def_sampler, pos).a);
}

float4 PSDefault(VertFragData vtx, texture2d PreviousPass) : TARGET {
	float4 cc = getSample(vtx.uv);

	float4 t = getSample(vtx.uv + float2(0, -dy));
	float4 tl = getSample(vtx.uv + float2(-dx, -dy));
	float4 tr = getSample(vtx.uv + float2(dx, -dy));
	
	float4 l = getSample(vtx.uv + float2(-dx, 0));
	float4 r = getSample(vtx.uv + float2(dx, 0));
	
	float4 b = getSample(vtx.uv + float2(0, dy));
	float4 bl = getSample(vtx.uv + float2(-dx, dy));
	float4 br = getSample(vtx.uv + float2(dx, dy));

	float maxDark = max3(br, b, bl);
	float minLight = min3(tl, t, tr);
	
	if (minLight > cc[3] && minLight > maxDark) {
		return getAverage(cc, tl, t, tr);
	} else {
		maxDark = max3(tl, t, tr);
		minLight = min3(br, b, bl);
		if (minLight > cc[3] && minLight > maxDark) {
			return getAverage(cc, br, b, bl);
		}
	}
	
	//Kernel 1 and 5
	maxDark = max3(cc, l, b);
	minLight = min3(r, t, tr);
	
	if (minLight > maxDark) {
		return getAverage(cc, r, t, tr);
	} else {
		maxDark = max3(cc, r, t);
		minLight = min3(bl, l, b);
		if (minLight > maxDark) {
			return getAverage(cc, bl, l, b);
		}
	}
	
	//Kernel 2 and 6
	maxDark = max3(l, tl, bl);
	minLight = min3(r, br, tr);
	
	if (minLight > cc[3] && minLight > maxDark) {
		return getAverage(cc, r, br, tr);
	} else {
		maxDark = max3(r, br, tr);
		minLight = min3(l, tl, bl);
		if (minLight > cc[3] && minLight > maxDark) {
			return getAverage(cc, l, tl, bl);
		}
	}
	
	//Kernel 3 and 7
	maxDark = max3(cc, l, t);
	minLight = min3(r, br, b);
	
	if (minLight > maxDark) {
		return getAverage(cc, r, br, b);
	} else {
		maxDark = max3(cc, r, b);
		minLight = min3(t, l, tl);
		if (minLight > maxDark) {
			return getAverage(cc, t, l, tl);
		}
	}
	
	return cc;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vtx);
		pixel_shader  = PSDefault(vtx, PreviousPass); 
	}
}
